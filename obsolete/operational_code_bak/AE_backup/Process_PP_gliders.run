#!/bin/bash

# WARNING THIS MUST BE RE-WRITTEN IN PYTHON AS BASH COME WITH GPL LICENSE!!!! 
# COMPILED OUTPUT OF GCC APPEARS TO BE OK, EVEN THOUGH GCC ITSELF IS GPL-ed

#Purpose:	Unspecified

#Version: 	v1.0 11/2017

#Ver. hist:

#Author:	Ben Loveday, Plymouth Marine Laboratory

#License:       MIT Licence -- Copyright 2017 Plymouth Marine Laboratory
#
#		Permission is hereby granted, free of charge, to any person
#               obtaining a copy of this software and associated documentation 
#               files (the "Software"), to deal in the Software without 
#               restriction, including without limitation the rights to use, 
#               copy, modify, merge, publish, distribute, sublicense, and/or 
#               sell copies of the Software, and to permit persons to whom the 
#               Software is furnished to do so, subject to the following 
#               conditions:
#
#               The above copyright notice and this permission notice shall be 
#               included in all copies or substantial portions of the Software.
#
#               THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#               EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#               OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
#               NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
#               HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
#               WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
#               FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#               OTHER DEALINGS IN THE SOFTWARE.

glider_num=$1
quench_type=$2
skip_par=$3
start_stage=$4

if [ "$glider_num" == "441" ]; then
   glider="EGO_441_Cook"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/Cook_20171115/'$glider'/'
elif [ "$glider_num" == "454" ]; then
   glider="EGO_454_Cabot"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/'$glider'/'
elif [ "$glider_num" == "477" ]; then
   glider="EGO_477_Dolomite"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/'$glider'/'
elif [ "$glider_num" == "478" ]; then
   glider="EGO_478_Eltanin"
   data_dir='/home/ben/shared/Linux_desktop/data/datasets/Projects/AlterEco/Glider_update_run/BODC_pp_data/EGO/'$glider'/'
elif [ "$glider_num" == "481" ]; then
   glider="EGO_481_Kelvin"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/'$glider'/'
elif [ "$glider_num" == "494" ]; then
   glider="EGO_494_Stella"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/Stella_20180207/'$glider'/'
elif [ "$glider_num" == "499" ]; then
   glider="EGO_499_Dolomite"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/Dolomite_20181202/'$glider'/'
elif [ "$glider_num" == "500" ]; then
   glider="EGO_500_Coprolite"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/Coprolite_20181202/'$glider'/'
elif [ "$glider_num" == "517" ]; then
   glider="EGO_517_Cabot"
   data_dir='/data/datasets/Projects/AlterEco/Glider_data/BODC_pp_data/EGO/Cabot_20190312/'$glider'/'
# new runs...
elif [ "$glider_num" == "579" ]; then
   glider="UEA_579_humpback"
   data_dir='/home/ben/shared/Linux_desktop/data/datasets/Projects/AlterEco/Glider_update_run/BODC_pp_data/humpback_UEA/'$glider'/'
elif [ "$glider_num" == "455" ]; then
   glider="EGO_455_Orca"
   data_dir='/home/ben/shared/Linux_desktop/data/datasets/Projects/AlterEco/Glider_update_run/BODC_pp_data/EGO/'$glider'/'
elif [ "$glider_num" == "493" ]; then
   glider="EGO_493_Orca"
   data_dir='/home/ben/shared/Linux_desktop/data/datasets/Projects/AlterEco/Glider_update_run/BODC_pp_data/EGO/'$glider'/'
elif [ "$glider_num" == "496" ]; then
   glider="EGO_496_Melonhead"
   data_dir='/home/ben/shared/Linux_desktop/data/datasets/Projects/AlterEco/Glider_update_run/BODC_pp_data/EGO/'$glider'/'
fi

glider_tag=$glider'_binned'
py_dir='/Users/benloveday/Code/Git_Reps/AE_backup/AlterEco/'
root_dir='/Users/benloveday/Code/Git_Reps/AE_backup/AlterEco/pp_models/operational'
code_dir=$root_dir'/bin/linux'
lib_dir='/home/ben/shared/Linux_desktop/local1/data/scratch/blo/AlterEco/pp_models/operational/shared/build'
pp_defaults_dir=$root_dir'/data'
var='chl'
method='profile'
var_method=$var'_'$method
tstep=5
pre_proc_options='-fc -pc'
runcorr=0
rununcorr=1
runsplit=1
# testing switch; will only produce verbose command output for section 6. 
testing=0

#-------------------------NO MORE USER INPUT BELOW HERE-------------------------
#-------------------------------------------------------------------------------
# this should aready be in .bashrc, but define here anyway
LD_LIBRARY_PATH=$code_dir:$LD_LIBRARY_PATH
LD_LIBRARY_PATH=$lib_dir:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---

#----------------------------------STAGE 1--------------------------------------
#-------------------------------------------------------------------------------
# check for external variables: build data cubes and 'fly through'
if [ "$start_stage" -le "1" ]; then
   $py_dir/glider_EO_trajectory.py -m $glider_tag
else
   echo 'Skipped deriving of trajectory variables'
fi

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---

#----------------------------------STAGE 2--------------------------------------
#-------------------------------------------------------------------------------
# prep glider data: options determined by pre_proc_options
# -fc will perform fluoro correction
# -pc will perform par correction
if [ "$start_stage" -le "2" ]; then
   correct_tag='corrected_for_quenching_PAR'
   data_dir=$data_dir'/'$correct_tag
   $py_dir/preprocess_gliders.py -m $glider_tag $pre_proc_options -qm 'all' -v
else
   echo 'Skipped pre-processing'
fi

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---

#----------------------------------STAGE 3--------------------------------------
#-------------------------------------------------------------------------------
# get relevant chl files: generated by preprocess_gliders.py
echo "Finding CHL files..."
chl_files=`find $data_dir -name $var_method"_station_??????"$quench_type | sort -g`
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---

#----------------------------------STAGE 4--------------------------------------
#-------------------------------------------------------------------------------
# loop through chl files:
#  - read telemetry information
#  - read external variable information
#  - 	perform 0- spectral PAR generation, scale, and depth-project

if [ "$start_stage" -le "4" ]; then
   count=1
   for chl_file in $chl_files; do
      count=$(($count+1))
      #---
      echo '-------------------------------------------------------------------'
      echo 'Processing chl file: '$chl_file
      telemetry_file="${chl_file/$var_method/telemetry}"
      par_file="${chl_file/$var/par}"
      ed_file="${chl_file/$var/ed}"
      zen_file="${chl_file/$var/zen}"
      #---
      echo 'Reading telemetry from: '$telemetry_file
      while read fvar fvalue; do
         if [ "$fvar" = "time" ]; then
            time=$fvalue
         elif [ "$fvar" = "longitude" ]; then
            lon=$fvalue
         elif [ "$fvar" = "latitude" ]; then
            lat=$fvalue
         elif [ "$fvar" = "year" ]; then
            year=$fvalue
         elif [ "$fvar" = "month" ]; then
            month=$fvalue
         elif [ "$fvar" = "day" ]; then
            day=$fvalue
         elif [ "$fvar" = "jday" ]; then
            jday=$fvalue
         elif [ "$fvar" = "temp" ]; then
            temp=$fvalue
         elif [ "$fvar" = "wspd" ]; then
            wspd=$fvalue
         elif [ "$fvar" = "rh" ]; then
            rh=$fvalue
         elif [ "$fvar" = "tcwv" ]; then
            tcwv=$fvalue
         elif [ "$fvar" = "mslp" ]; then
            mslp=$fvalue
         elif [ "$fvar" = "cloud" ]; then
            cloud=$fvalue
         elif [ "$fvar" = "o3" ]; then
            o3=$fvalue
         elif [ "$fvar" = "E0p" ]; then
            E0=$fvalue
         fi
      done <$telemetry_file

      #---PAR calculations------------------------------------------------------
      echo 'Generating ed_file: '$ed_file

      if [ -f "$ed_file" ]; then
          chmod a+rw $ed_file
          rm -f $ed_file
      fi

      if [ -f "$zen_file" ]; then
          chmod a+rw $zen_file
          rm -f $zen_file
      fi

      $code_dir/par --lon $lon \
                    --lat $lat \
                    --atmo_read $pp_defaults_dir/gcirrad.dat \
                    --D $jday \
                    --P $mslp \
                    --O_3 $o3 \
                    --C $cloud \
                    --W $wspd \
                    --RH $rh \
                    --WV $tcwv \
                    --time_step $tstep \
                    --par $ed_file \
                    --zen $zen_file
      
      chmod a+rw $par_file
      chmod a+rw $zen_file

      # perform CHL scaling and Ed scaling prior to running PP model 
      # (for both uncorrected and corrected cases)
      echo 'Processing par file: '$par_file
      $py_dir/project_spectral_PAR.py -ed $ed_file -e0 $E0 -t $time -g $glider \
                                      -chl $chl_file \
                                      -par $par_file \
                                      -m $var_method
   done
else
   echo 'Skipped par calculation/scaling/projection'
fi


#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---

#----------------------------------STAGE 5--------------------------------------
#-------------------------------------------------------------------------------
# generate the chl and ed correction files. Subset Ed file to relevant time.
if [ "$start_stage" -le "5" ]; then
   $py_dir/apply_Chl_Ed_corrections.py -d $data_dir -g $glider \
                                       -s $quench_type
else
   echo 'Skipped applying corrections/subsetting'
fi
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---

#----------------------------------STAGE 6--------------------------------------
#-------------------------------------------------------------------------------
if [ "$start_stage" -le "6" ]; then
   # restart the loop to run pp calculations
   for chl_file in $chl_files; do
      chl_file_corrected="${chl_file/'.txt'/'.corr'}"
      ed_file="${chl_file/$var/eds}"
      ed_file_corrected="${ed_file/'.txt'/'.corr'}"
      pp_file="${chl_file/$var/pp}"
      pp_file_corrected="${pp_file/'.txt'/'.corr'}"
      pp_file_split="${pp_file/'.txt'/'.split'}"
      telemetry_file="${chl_file/$var_method/telemetry}"

      echo 'Reading temperature from: '$telemetry_file
      while read fvar fvalue; do
         if [ "$fvar" = "temp" ]; then
            temp=$fvalue
         fi
      done <$telemetry_file

      #---PP calculations-------------------------------------------------------
      if [ "$testing" = "1" ]; then
          echo "$code_dir/morel91 --chl_read $chl_file \
                          --T $temp \
                          --max_depth '100' \
                          --euphotic_ratio '0.0001' \
                          --kc_read $pp_defaults_dir/kc \
                          --kw_read $pp_defaults_dir/kw \
                          --aw_read $pp_defaults_dir/aw \
                          --bw_read $pp_defaults_dir/bw \
                          --Achl_read $pp_defaults_dir/Achl \
                          --phi_mu_max 0.03 \
                          --ed_read $ed_file \
                          --profile_write $pp_file"
      else
          # ENFORCING DEEP LIGHT PENETRATION HERE!
          if [ "$rununcorr" = "1" ]; then
            echo 'Generating pp_file: '$pp_file
            $code_dir/morel91 --chl_read $chl_file \
                          --T $temp \
                          --max_depth '100' \
                          --euphotic_ratio '0.0001' \
                          --kc_read $pp_defaults_dir/kc \
                          --kw_read $pp_defaults_dir/kw \
                          --aw_read $pp_defaults_dir/aw \
                          --bw_read $pp_defaults_dir/bw \
                          --Achl_read $pp_defaults_dir/Achl \
                          --phi_mu_max 0.03 \
                          --ed_read $ed_file \
                          --profile_write $pp_file
          fi
          if [ "$runcorr" = "1" ]; then    
            echo 'Generating pp_file: '$pp_file_corrected
            $code_dir/morel91 --chl_read $chl_file_corrected \
                          --T $temp \
                          --max_depth '100' \
                          --euphotic_ratio '0.0001' \
                          --kc_read $pp_defaults_dir/kc \
                          --kw_read $pp_defaults_dir/kw \
                          --aw_read $pp_defaults_dir/aw \
                          --bw_read $pp_defaults_dir/bw \
                          --Achl_read $pp_defaults_dir/Achl \
                          --phi_mu_max 0.03 \
                          --ed_read $ed_file_corrected \
                          --profile_write $pp_file_corrected
          fi
          if [ "$runsplit" = "1" ]; then
            echo 'Generating pp_file: '$pp_file_split
            $code_dir/morel91 --chl_read $chl_file \
                          --T $temp \
                          --max_depth '100' \
                          --euphotic_ratio '0.0001' \
                          --kc_read $pp_defaults_dir/kc \
                          --kw_read $pp_defaults_dir/kw \
                          --aw_read $pp_defaults_dir/aw \
                          --bw_read $pp_defaults_dir/bw \
                          --Achl_read $pp_defaults_dir/Achl \
                          --phi_mu_max 0.03 \
                          --ed_read $ed_file_corrected \
                          --profile_write $pp_file_split
          fi
      fi     
   done
else
   echo 'Skipped Morel91 PP calculations'
fi
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#---
echo 'DONE AND DUSTED!'
exit
#----------------------------------STAGE 7--------------------------------------
#-------------------------------------------------------------------------------
#-rebuild netcdf---
if [ "$start_stage" -le "7" ]; then
   $py_dir/postprocess_gliders.py -m $glider_tag -o $data_dir -v
   $py_dir/postprocess_gliders.py -m $glider_tag -o $data_dir -c -v
else
   echo 'Skipped post-processing'
fi
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

#DONE

